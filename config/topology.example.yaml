# frozen_string_literal: true

#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Power Server.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Power Server is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Cloud. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Power Server, please visit:
# https://github.com/openflighthpc/power-server
#===============================================================================

# Uncomment to define a static set of nodes (Can not be used in upstream mode)
# static_nodes:
#   node01:
#     platform: aws
#     ec2_id: i-node01xxxxxxxxxxx
#     region: eu-west-1
#   node02:
#     platform: aws
#     ec2_id: i-node02xxxxxxxxxxx
#     region: eu-west-1
#   node03:
#     platform: aws
#     ec2_id: i-node03xxxxxxxxxxx
#     region: eu-west-1
#   node04:
#     platform: aws
#     ec2_id: i-node04xxxxxxxxxxx
#     region: eu-west-1
#   node05:
#     platform: aws
#     ec2_id: i-node05xxxxxxxxxxx
#     region: eu-west-1
#   gpu01:
#     platform: azure
#     resource_group: demo-power-group
#   gpu02:
#     platform: azure
#     resource_group: demo-power-group
#   gpu03:
#     platform: azure
#     resource_group: demo-power-group
#   gpu04:
#     platform: azure
#     resource_group: demo-power-group
#   gpu05:
#     platform: azure
#     resource_group: demo-power-group
#   metal01:
#     platform: ipmi
#     ipmi_username: admin
#   metal02:
#     platform: ipmi
#     ipmi_username: admin
#   metal03:
#     platform: ipmi
#     ipmi_username: admin
#   metal04:
#     platform: ipmi
#     ipmi_username: admin
#   metal05:
#     platform: ipmi
#     ipmi_username: admin
#   # This config does not check for missing platforms. Instead missing platforms
#   # will always run 'exit 1' as there commands
#   badnode:
#     platform: missing_platform

# Define the platforms here
platforms:
  ipmi:
    variables: [name, ipmi_username]
    power_on: ipmitool -H "$name"-bmc -U "$ipmi_username" -E chassis power on -I lanplus
    power_off: ipmitool -H "$name"-bmc -U "$ipmi_username" -E chassis power off -I lanplus
    restart: ipmitool -H "$name"-bmc -U "$ipmi_username" -E chassis power reset -I lanplus
    status: |-
      output=$(ipmitool -H "$name"-bmc -U "$ipmi_username" -E chassis power status -I lanplus)
      if echo "$output" | grep on; then
        exit 0
      elif echo "$output" | grep off; then
        exit 111
      else
        exit 1
      fi

  aws:
    variables: [ec2_id, region]
    power_on: aws ec2 start-instances --instance-ids "$ec2_id" --region "$region"
    power_off: aws ec2 stop-instances --instance-ids "$ec2_id" --region "$region"
    restart: aws ec2 reboot-instances --instance-ids "$ec2_id" --region "$region"
    status_off_exit_code: 123 # Default: 111
    status: |-
      status=$(aws ec2 describe-instances --instance-ids "$ec2_id" \
                                          --region "$region" \
                                          --query Reservations[0].Instances[0].State.Name)
      case "$status" in
        \"running\")
          exit 0
          ;;
        \"stopped\")
          exit 123
          ;;
        *)
          exit 1
          ;;
      esac

  azure:
    variables: [resource_group, name]
    power_on: az vm start --resource-group "$resource_group" --name "$name"
    power_off: az vm stop --resource-group "$resource_group" --name "$name"
    restart: az vm restart --resource-group "$resource_group" --name "$name"
    # status_off_exit_code: 111
    status: |-
      status=$(az vm get-instance-view --resource-group "$resource_group" \
                                       --name "$name" \
                                       --query instanceView.statuses[1].code)
      case "$status" in
        \"PowerState/running\")
          exit 0
          ;;
        \"PowerState/stopped\")
          exit 111
          ;;
        *)
          exit 1
          ;;
      esac

